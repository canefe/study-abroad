// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

/**
 * These models are not required since we use "JWT" strategy for NextAuth.js
 * But in the future, to integrate University of Glasgow's SSO, we have to switch to "database" strategy.
 * NextAuth.js supports Azure AD provider, which can be used to integrate with University of Glasgow's SSO.
 * model Account {
 * id                       String  @id @default(cuid())
 * userId                   String
 * type                     String
 * provider                 String
 * providerAccountId        String
 * refresh_token            String? // @db.Text
 * access_token             String? // @db.Text
 * expires_at               Int?
 * token_type               String?
 * scope                    String?
 * id_token                 String? // @db.Text
 * session_state            String?
 * user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
 * refresh_token_expires_in Int?
 * @@unique([provider, providerAccountId])
 * }
 * model Session {
 * id           String   @id @default(cuid())
 * sessionToken String   @unique
 * userId       String
 * expires      DateTime
 * user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 * }
 */
enum Role {
    STUDENT
    ADMIN
}

model User {
    id                String         @id @default(cuid())
    name              String?
    email             String?        @unique
    emailVerified     DateTime?
    image             String?
    role              Role           @default(STUDENT)
    guid              String?        @unique
    //accounts          Account[]
    //sessions          Session[]
    applications      Application[]
    messages          Message[]
    mutedUsers        User[]         @relation("MutedUsers")
    mutedBy           User[]         @relation("MutedUsers")
    notifications     Notification[] @relation("UserRelation")
    sentNotifications Notification[] @relation("SenderRelation")
}

model University {
    id           Int           @id @default(autoincrement())
    name         String        @unique
    location     String
    courses      Course[]
    applications Application[]
    //school       School[]
}

// A model for University's Schools, every school will have its own courses and applications
/**
 * model School {
 * id           Int           @id @default(autoincrement())
 * name         String
 * universityId Int
 * university   University    @relation(fields: [universityId], references: [id])
 * courses      Course[]
 * applications Application[]
 * }
 */
enum Year {
    // SECOND YEAR SINGLE COURSES
    SECOND_YEAR_SINGLE_FULL_YEAR
    SECOND_YEAR_SINGLE_FIRST_SEMESTER
    SECOND_YEAR_SINGLE_SECOND_SEMESTER
    // SECOND YEAR JOINT COURSES
    SECOND_YEAR_JOINT_FULL_YEAR
    SECOND_YEAR_JOINT_FIRST_SEMESTER
    SECOND_YEAR_JOINT_SECOND_SEMESTER

    // THIRD YEAR
    THIRD_YEAR_SINGLE_FULL_YEAR
    THIRD_YEAR_JOINT_FULL_YEAR
}

model CourseChoice {
    id                   Int         @id @default(autoincrement())
    applicationId        Int
    homeCourseId         Int
    primaryCourseId      Int?
    alternativeCourse1Id Int?
    alternativeCourse2Id Int?
    application          Application @relation(fields: [applicationId], references: [id])
    homeCourse           Course      @relation("HomeCourse", fields: [homeCourseId], references: [id])
    primaryCourse        Course?     @relation("PrimaryCourse", fields: [primaryCourseId], references: [id])
    alternativeCourse1   Course?     @relation("AlternativeCourse1", fields: [alternativeCourse1Id], references: [id])
    alternativeCourse2   Course?     @relation("AlternativeCourse2", fields: [alternativeCourse2Id], references: [id])
}

enum Status {
    DRAFT
    SUBMITTED // submitted for review
    APPROVED
    REVISE // needs to be revised by the user
}

model Application {
    id                 Int            @id @default(autoincrement())
    userId             String
    abroadUniversityId Int
    status             Status
    messages           Message[]
    courseChoices      CourseChoice[]
    year               Year?
    schoolId           Int?
    //school             School?        @relation(fields: [schoolId], references: [id])
    // If the student is on an alternate route
    alternateRoute     Boolean        @default(false)
    // Store a text note for optional courses
    note               String?
    user               User           @relation(fields: [userId], references: [id])
    abroadUniversity   University     @relation(fields: [abroadUniversityId], references: [id])
}

model Message {
    id            Int         @id @default(autoincrement())
    applicationId Int
    senderId      String
    content       String
    createdAt     DateTime    @default(now())
    parentId      Int?
    replies       Message[]   @relation("MessageReplies")
    application   Application @relation(fields: [applicationId], references: [id])
    sender        User        @relation(fields: [senderId], references: [id])
    parent        Message?    @relation("MessageReplies", fields: [parentId], references: [id])
}

model Course {
    id                        Int            @id @default(autoincrement())
    name                      String         @unique
    universityId              Int
    university                University     @relation(fields: [universityId], references: [id])
    flagged                   Boolean        @default(false) // Flagged courses are courses that need to be reviewed by an admin
    createdAt                 DateTime       @default(now())
    createdBy                 String? // The user who created the course
    verified                  Boolean        @default(false) // Verified courses are courses that have been reviewed by an admin
    year                      Year[]
    link                      String?
    schoolId                  Int?
    //school                    School?        @relation(fields: [schoolId], references: [id])
    homeCourseChoices         CourseChoice[] @relation("HomeCourse")
    primaryCourseChoices      CourseChoice[] @relation("PrimaryCourse")
    alternativeCourse1Choices CourseChoice[] @relation("AlternativeCourse1")
    alternativeCourse2Choices CourseChoice[] @relation("AlternativeCourse2")
}

// A model for Notifications.
model Notification {
    id        Int      @id @default(autoincrement())
    userId    String
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    senderId  String?
    sender    User?    @relation("SenderRelation", fields: [senderId], references: [id])
    user      User     @relation("UserRelation", fields: [userId], references: [id])
}

// A model for Settings
model Setting {
    id        Int      @id @default(autoincrement())
    key       String   @unique
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
