// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    STUDENT
    ADMIN
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    role          Role           @default(STUDENT)
    guid          String?        @unique
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    CourseChoice  CourseChoice[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model University {
    id           Int            @id @default(autoincrement())
    name         String
    location     String
    courses      Course[]
    CourseChoice CourseChoice[]
}

enum Semester {
    SEMESTER_1
    SEMESTER_2
    FULL_YEAR
}

model CourseChoice {
    id                   Int      @id @default(autoincrement())
    userId               String
    homeCourseId         Int
    abroadUniversityId   Int
    primaryCourseId      Int?
    alternativeCourse1Id Int?
    alternativeCourse2Id Int?
    status               String
    semester             Semester
    year                 Int
    feedback             String?

    user               User       @relation(fields: [userId], references: [id])
    homeCourse         Course     @relation("HomeCourse", fields: [homeCourseId], references: [id])
    abroadUniversity   University @relation(fields: [abroadUniversityId], references: [id])
    primaryCourse      Course?    @relation("PrimaryCourse", fields: [primaryCourseId], references: [id])
    alternativeCourse1 Course?    @relation("AlternativeCourse1", fields: [alternativeCourse1Id], references: [id])
    alternativeCourse2 Course?    @relation("AlternativeCourse2", fields: [alternativeCourse2Id], references: [id])
}

model Course {
    id           Int        @id @default(autoincrement())
    name         String
    universityId Int
    university   University @relation(fields: [universityId], references: [id])

    homeCourseChoices         CourseChoice[] @relation("HomeCourse")
    primaryCourseChoices      CourseChoice[] @relation("PrimaryCourse")
    alternativeCourse1Choices CourseChoice[] @relation("AlternativeCourse1")
    alternativeCourse2Choices CourseChoice[] @relation("AlternativeCourse2")
}
